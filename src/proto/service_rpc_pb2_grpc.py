# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.service_rpc_pb2 as service__rpc__pb2


class CatalogStub(object):
    """Catalog Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.lookup = channel.unary_unary(
                '/Catalog/lookup',
                request_serializer=service__rpc__pb2.lookupRequestMessage.SerializeToString,
                response_deserializer=service__rpc__pb2.lookupResponseMessage.FromString,
                )
        self.buy_or_sell_stock = channel.unary_unary(
                '/Catalog/buy_or_sell_stock',
                request_serializer=service__rpc__pb2.orderRequestMessage.SerializeToString,
                response_deserializer=service__rpc__pb2.orderResponseMessage.FromString,
                )


class CatalogServicer(object):
    """Catalog Service Definition
    """

    def lookup(self, request, context):
        """lookup method for communication between front end server or order service and catalog service 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buy_or_sell_stock(self, request, context):
        """buy method (order service to catalog service)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CatalogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.lookup,
                    request_deserializer=service__rpc__pb2.lookupRequestMessage.FromString,
                    response_serializer=service__rpc__pb2.lookupResponseMessage.SerializeToString,
            ),
            'buy_or_sell_stock': grpc.unary_unary_rpc_method_handler(
                    servicer.buy_or_sell_stock,
                    request_deserializer=service__rpc__pb2.orderRequestMessage.FromString,
                    response_serializer=service__rpc__pb2.orderResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Catalog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Catalog(object):
    """Catalog Service Definition
    """

    @staticmethod
    def lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/lookup',
            service__rpc__pb2.lookupRequestMessage.SerializeToString,
            service__rpc__pb2.lookupResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buy_or_sell_stock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/buy_or_sell_stock',
            service__rpc__pb2.orderRequestMessage.SerializeToString,
            service__rpc__pb2.orderResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrderStub(object):
    """Order Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.trade = channel.unary_unary(
                '/Order/trade',
                request_serializer=service__rpc__pb2.tradeRequestMessage.SerializeToString,
                response_deserializer=service__rpc__pb2.tradeResponseMessage.FromString,
                )
        self.lookupOrder = channel.unary_unary(
                '/Order/lookupOrder',
                request_serializer=service__rpc__pb2.lookupOrderRequestMessage.SerializeToString,
                response_deserializer=service__rpc__pb2.lookupOrderResponseMessage.FromString,
                )


class OrderServicer(object):
    """Order Service Definition
    """

    def trade(self, request, context):
        """trade method for communication between front-end server and order service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lookupOrder(self, request, context):
        """lookup method for communication between front end server and order service 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'trade': grpc.unary_unary_rpc_method_handler(
                    servicer.trade,
                    request_deserializer=service__rpc__pb2.tradeRequestMessage.FromString,
                    response_serializer=service__rpc__pb2.tradeResponseMessage.SerializeToString,
            ),
            'lookupOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.lookupOrder,
                    request_deserializer=service__rpc__pb2.lookupOrderRequestMessage.FromString,
                    response_serializer=service__rpc__pb2.lookupOrderResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Order', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Order(object):
    """Order Service Definition
    """

    @staticmethod
    def trade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/trade',
            service__rpc__pb2.tradeRequestMessage.SerializeToString,
            service__rpc__pb2.tradeResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lookupOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Order/lookupOrder',
            service__rpc__pb2.lookupOrderRequestMessage.SerializeToString,
            service__rpc__pb2.lookupOrderResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
