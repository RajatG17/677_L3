// Catalog Service Definition
service Catalog{

    // lookup method for communication between front end server or order service and catalog service 
    rpc lookup (lookupRequestMessage) returns (lookupResponseMessage);

    // buy method (order service to catalog service)
    rpc buy_or_sell_stock (orderRequestMessage) returns (orderResponseMessage);
    
}

// Order Service Definition
service Order{

    // trade method for communication between front-end server and order service
    rpc trade(tradeRequestMessage) returns (tradeResponseMessage);

    // method to check health of order service
    rpc healthCheck(checkMessage) returns (checkResponse);

    //metod to set leader of order services
    rpc setLeader(leaderOrderMessage) returns (leaderResponse);

    // order lookup method
    rpc lookupOrder(lookupOrderRequestMessage) returns (lookupOrderResponseMessage);

    //mehthod to update followers
    rpc update_db(syncRequestMessage) returns (syncResponseMessage);

    // method to update database after recovering from crash
    rpc synchronize_database(recoveryRequestMessage) returns (recoveryResponseMessage);

    //method to send database records to service after it recovers
    rpc send_db_data(dataRequestMessage) returns (dataResponseMessage);
}

message lookupRequestMessage{
    required string stockname = 1;
}

enum ERROR_CODES{
    NO_ERROR = 0;
    INVALID_STOCKNAME = 1;
    INTERNAL_ERROR = 2;
    INSUFFICIENT_QUANTITY = 3;
    INVALID_REQUEST = 4;
    DB_UPDATE_ERROR = 5;
    INVALID_ORDERNUMBER = 6;
}

message lookupOrderRequestMessage{
    required int32 order_number = 1; 
}

message dataRequestMessage{
    required int32 transaction_number = 1;
}

message dataResponseMessage{
    required ERROR_CODES error = 1;
    repeated string transaction_str = 2;
}

message lookupOrderResponseMessage{
    required ERROR_CODES error = 1;
    optional float number = 2;
    optional string name = 3;
    optional string type = 4;
    optional int32 quantity = 5;
}

message leaderOrderMessage{
    required int32 leaderId = 1;
    repeated int32 replica_Ids = 2;
    repeated int32 replica_Ports = 3;
    repeated string replica_Hosts = 4;
}

message leaderResponse{
    required bool result = 1;
}

message lookupResponseMessage{
    required ERROR_CODES error = 1;
    optional string stockname = 2;
    optional float price = 3;
    optional int32 quantity = 4;
}

message orderRequestMessage{
    required string stockname = 1;
    required int32 quantity = 2;
    required string type = 3;
    required int32 serviceId = 4;
}

message orderResponseMessage{
    required ERROR_CODES error = 1;
}


message tradeRequestMessage{
    required string stockname = 1;
    required int32 quantity = 2;
    required string type = 3;
    optional int32 transaction_number = 4;
}

message syncRequestMessage{
    required string stockname = 1;
    required int32 quantity = 2;
    required string type = 3;
    required int32 transaction_number = 4;
}

message tradeResponseMessage{
    required ERROR_CODES error = 1;
    optional int32 transaction_number = 2;

}

message syncResponseMessage{
    required ERROR_CODES error = 1;
}

message recoveryRequestMessage{
    required int32 leaderId = 1;
    repeated int32 replica_Ids = 2;
    repeated int32 replica_Ports = 3;
    repeated string replica_Hosts = 4;
}

message recoveryResponseMessage{
    required ERROR_CODES error = 1;
}

message checkMessage{
    required string ping = 1;
}

message checkResponse{
    optional bool response = 1 [default=false];
    optional string error = 2;
}