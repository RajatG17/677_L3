// Catalog Service Definition
service Catalog{

    // lookup method for communication between front end server or order service and catalog service 
    rpc lookup (lookupRequestMessage) returns (lookupResponseMessage);

    // buy method (order service to catalog service)
    rpc buy_or_sell_stock (orderRequestMessage) returns (orderResponseMessage);

    rpc setLeader(leaderMessage) returns (leaderResponse);
    
}

// Order Service Definition
service Order{

    // trade method for communication between front-end server and order service
    rpc trade(tradeRequestMessage) returns (tradeResponseMessage);

    // method to check health of order service
    rpc healthCheck(checkMessage) returns (checkResponse);

    //metod to set leader of order services
    rpc setLeader(leaderOrderMessage) returns (leaderResponse);
}

message lookupRequestMessage{
    required string stockname = 1;
}

enum ERROR_CODES{
    NO_ERROR = 0;
    INVALID_STOCKNAME = 1;
    INTERNAL_ERROR = 2;
    INSUFFICIENT_QUANTITY = 3;
    INVALID_REQUEST = 4;
}

message leaderMessage{
    required int32 leaderId = 1;
}

message leaderOrderMessage{
    required int32 leaderId = 1;
    repeated int32 followerIds = 2;
    repeated int32 followerPorts = 3;
    repeated string followerHosts = 4;
}

message leaderResponse{
    required bool result = 1;
}

message lookupResponseMessage{
    required ERROR_CODES error = 1;
    optional string stockname = 2;
    optional float price = 3;
    optional int32 quantity = 4;
}

message orderRequestMessage{
    required string stockname = 1;
    required int32 quantity = 2;
    required string type = 3;
    required int32 serviceId = 4;
}

message orderResponseMessage{
    required ERROR_CODES error = 1;
}


message tradeRequestMessage{
    required string stockname = 1;
    required int32 quantity = 2;
    required string type = 3;
    optional int32 transaction_number = 4;
}

message tradeResponseMessage{
    required ERROR_CODES error = 1;
    optional int32 transaction_number = 2;

}

message checkMessage{
    required string ping = 1;
}

message checkResponse{
    optional bool response = 1 [default=false];
    optional string error = 2;
}